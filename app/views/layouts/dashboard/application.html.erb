<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>MPC Dashboard</title> 
    <%= favicon_link_tag 'dashboard/favicon.ico' %> 
    <!-- Include style per-controller - vendor plugins -->
    <%= stylesheet_link_tag params[:controller] if ::Rails.application.assets.find_asset("#{params[:controller]}.css") %>
    <%= action_cable_meta_tag %>
    <!-- Main css styles -->
    <%= stylesheet_link_tag "dashboard/application", media: 'all', type: "text/css" %>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/bs/pdfmake-0.1.18/dt-1.10.12/af-2.1.2/b-1.2.2/b-html5-1.2.2/b-print-1.2.2/r-2.1.0/datatables.min.css"/>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/select/1.2.1/css/select.dataTables.min.css"/>
    

    <!-- Main javascript files -->
    <%= javascript_include_tag "dashboard/application" %>
    <link href="https://file.myfontastic.com/jFSUq6ichmPC3uwTAP3wKJ/icons.css" rel="stylesheet">
    
    <meta name="description" content="">
    <meta name="author" content="">
    <script type="text/javascript" src="//cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/pdfmake.min.js"></script>
    <script type="text/javascript" src="//cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/vfs_fonts.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/v/bs/pdfmake-0.1.18/dt-1.10.12/af-2.1.2/b-1.2.2/b-html5-1.2.2/b-print-1.2.2/r-2.1.0/datatables.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/select/1.2.1/js/dataTables.select.min.js"></script>
    
    <% if content_for?(:head) %>
        <%= yield(:head) %>
    <% end %>

    <%= csrf_meta_tags %>
</head>
  <body data-controller="<%= controller_name %>" data-action="<%= action_name %>">
<!-- Skin configuration box -->
<!-- <%= render 'layouts/dashboard/skinconfig' %> -->

    <!-- Wrapper-->
    <div id="wrapper" class="<%= params[:controller] %>.<%= params[:action] %>">

        <!-- Navigation -->
        <%= render 'layouts/dashboard/navigation' %>

        <!-- Page wraper -->
        <div id="page-wrapper" class="gray-bg <%= @extra_class %>">

            <!-- Page wrapper -->
            <%= render 'layouts/dashboard/topnavbar' %>

            <%= yield %>

            <!-- Footer -->
            <%= render 'layouts/dashboard/footer' %>

        </div>
        <!-- End page wrapper-->

        <!-- Right sidebar -->
        <%= render 'layouts/dashboard/rightsidebar' %>

      </div>

    <!-- End wrapper-->
    
    <!-- Include javascript per-controller - vendor plugins -->
    <%= javascript_include_tag params[:controller] if params[:controller] != 'users' && ::Rails.application.assets.find_asset("#{params[:controller]}.js") %>

    <!-- Include javascript per-view -->
    <!-- For demo purpose we include javascript in view but you can easily start SeedProject and organize it with Rails asset pipeline as you want -->
    <%= yield :javascript %>

    <script>
      ;(function(global) {

        var _processKeys = function(convert, obj, options) {
          if(!_isObject(obj) || _isDate(obj) || _isRegExp(obj) || _isBoolean(obj) || _isFunction(obj)) {
            return obj;
          }

          var output,
              i = 0,
              l = 0;

          if(_isArray(obj)) {
            output = [];
            for(l=obj.length; i<l; i++) {
              output.push(_processKeys(convert, obj[i], options));
            }
          }
          else {
            output = {};
            for(var key in obj) {
              if(Object.prototype.hasOwnProperty.call(obj, key)) {
                output[convert(key, options)] = _processKeys(convert, obj[key], options);
              }
            }
          }
          return output;
        };

        // String conversion methods

        var separateWords = function(string, options) {
          options = options || {};
          var separator = options.separator || '_';
          var split = options.split || /(?=[A-Z])/;

          return string.split(split).join(separator);
        };

        var camelize = function(string) {
          if (_isNumerical(string)) {
            return string;
          }
          string = string.replace(/[\-_\s]+(.)?/g, function(match, chr) {
            return chr ? chr.toUpperCase() : '';
          });
          // Ensure 1st char is always lowercase
          return string.substr(0, 1).toLowerCase() + string.substr(1);
        };

        var pascalize = function(string) {
          var camelized = camelize(string);
          // Ensure 1st char is always uppercase
          return camelized.substr(0, 1).toUpperCase() + camelized.substr(1);
        };

        var decamelize = function(string, options) {
          return separateWords(string, options).toLowerCase();
        };

        // Utilities
        // Taken from Underscore.js

        var toString = Object.prototype.toString;

        var _isFunction = function(obj) {
          return typeof(obj) === 'function';
        };
        var _isObject = function(obj) {
          return obj === Object(obj);
        };
        var _isArray = function(obj) {
          return toString.call(obj) == '[object Array]';
        };
        var _isDate = function(obj) {
          return toString.call(obj) == '[object Date]';
        };
        var _isRegExp = function(obj) {
          return toString.call(obj) == '[object RegExp]';
        };
        var _isBoolean = function(obj) {
          return toString.call(obj) == '[object Boolean]';
        };

        // Performant way to determine if obj coerces to a number
        var _isNumerical = function(obj) {
          obj = obj - 0;
          return obj === obj;
        };

        // Sets up function which handles processing keys
        // allowing the convert function to be modified by a callback
        var _processor = function(convert, options) {
          var callback = options && 'process' in options ? options.process : options;

          if(typeof(callback) !== 'function') {
            return convert;
          }

          return function(string, options) {
            return callback(string, convert, options);
          }
        };

        var humps = {
          camelize: camelize,
          decamelize: decamelize,
          pascalize: pascalize,
          depascalize: decamelize,
          camelizeKeys: function(object, options) {
            return _processKeys(_processor(camelize, options), object);
          },
          decamelizeKeys: function(object, options) {
            return _processKeys(_processor(decamelize, options), object, options);
          },
          pascalizeKeys: function(object, options) {
            return _processKeys(_processor(pascalize, options), object);
          },
          depascalizeKeys: function () {
            return this.decamelizeKeys.apply(this, arguments);
          }
        };

        if (typeof define === 'function' && define.amd) {
          define(humps);
        } else if (typeof module !== 'undefined' && module.exports) {
          module.exports = humps;
        } else {
          global.humps = humps;
        }

      })(this);

    </script>
    <!-- AJAX result popup notifications -->
    <div class="popup-notification modal fade " id="ajax-popup-notification" tabindex="-1" role="dialog" aria-labelledby="ajax-label" style="display: none;">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header alert ">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h3 class="modal-title" id="ajax-label"><i class="fa"></i> <span class="message-heading"></span></h3>
          </div>
          <div class="modal-body">
              <p class="message-body"></p>
              <button type="button" class="btn btn-primary" data-dismiss="modal" aria-label="OK">OK</button>
          </div>
        </div>
      </div>
    </div>
</body>
</html>
