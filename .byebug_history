c
params["firstName"]
params[:firstName]
params
c
u.access_tokens.last.token == params[:access_token]
u.access_tokens.last.token == params[:access_tokens]
u.access_tokens.last.token
u.access_tokens.last
u.access_tokens
u = User.first
params
current_user
c
User.first
current_user
params
c
params
params[:access_token]
c
final_companies
c
companies
category.name
c
step
user_companies.include?(2)
user_companies.include?(1)
user_companies
company.id
company.name
company
"#{i}"
i
c
companies
category
c
all_companies.group_by(&:company_category).to_json
all_companies.group_by(&:company_category)
all_companies.first.company_category
all_companies.first
all_companies
return current_user.has_roles? [:store_manager, :group_manager]
current_user
self.user
self.methods
self.class.name
self.has_role? :store_manager
self.can? :read, Device
self.can?
self
context
params
c
Device.where(store_id: options[:owner_id]).includes(store: {group: :branding_profile}).distinct.references(:device_type).includes(:device_type).distinct
n
options
c
options[:owner_type]
optiosn[:owner_type]
options[:owner_id]
options[:user]
options
c
DateTime.current - 2 * 4 * 7 * 24 * 60 * 60
DateTime.current.to_time - 2 * 4 * 7 * 24 * 60 * 60
DateTime.current.to_time
DateTime.current
defaults
c
request.params
params
date_to
date_from
sql
c
user.can? :attach_file, Topic
n
c
user.can? :create, Device
n
user.owner_type == 'Store'
user.has_role? :store_manager
n
c
group_setting
n
c
self.group
group_setting
n
c
@device.device_type.name
@device.expire_second_level_cache
@device.device_type.name
@device
c
sign_in device.store.users.first
device.store.users.first
device.store.users
device.users
Digest::MD5.hexdigest(device.registration_code) == params[:registration_code_md5]
device = Device.find params[:device_id]
params[:device_id]
params
c
a.question_option.score
a.question_option.value
n
a.question_option.nil?
a.value.nil?
c
self.formula
n
value
n
v
scores
n
value
n
question_number
n
step
question_list
n
c
variables.second.value self
variables.second
variables.first
scores
n
step
n
variables
c
question_answer = ''
question_answer
c
question_answer
c
question_answer
c
n
question_answer = ''
output
question_answer
c
n
question_answer
output
c
0.blank?
a.question
a.value
a
a.question_option
c
scores[:score][:value]
scores[:score]
scores
n
variables.first.value self
variables.first.value
c
disable breakpoints
n
self.formula
score
c
break 21
n
disable breakpoints
n
a.question_option.score
c
break 12
c
break 11
c
disable breakpoints
disable breakpoint
help
clear breakpoints
a.question_option.score
a.question_option
a
a.value
c
break 11
breakpoint 11
response.questionnaire_response_answers
score
n
c
variables.first.value self
scores
n
variables
c
n
c
params
n
c
calculator.evaluate('85 / (175 * 175 * 0.0001)').to_f.round(1)
calculator.evaluate('85 / (175 * 175 * 0.0001)').to_f
calculator.evaluate('85 / (175 * 175 * 0.0001)').round
calculator.evaluate('85 / (175 * 175 * 0.0001)').round(2)
calculator.evaluate('85 / (175 * 175 * 0.00001)').round(2)
calculator.evaluate('85 / (175 * 175)').round(2)
calculator.evaluate('85 / (175 * 175)').round
calculator.evaluate('85 / (175 * 175)')
calculator.evalue('85 / (175 * 175)')
calculator.evalue(85 / (175 * 175))
self.formula
n
calculator
a.value
c
"#{q.first.to_i}"
"#{q.first}"
"#{q}"
questionnaire_questions[q.to_i]
questionnaire_questions[q]
puts q
q
questionnaire_questions
n
step
n
step
n
question_list
n
c
n
/(SUM|AVG)/.match(self.formula)
c
variables.first.range
variables.first.value self
n
variables.first.questionnaire_variable_ranges.count
variables.first.questionnaire_variable_ranges
variables.first
variables
c
questionnaire_response
questionnaire_response.bmi
questionnaire_response.score
variables
c
params[:dependent_question_value]
request.params
